algoritmo conversãoTempo         // QUESTÃO 1) - LISTA 2

inteiro: s0, h, min, seg;

escreva("Digite o tempo em segundos: ");
leia(s0);

// Verifica e obriga que o tempo fornecido seja positivo
enquanto (s0 <= 0) {
        escreva("Entrada inválida! Por favor, digite um número positivo: ");
        leia(s0);
}

// Cálculo das horas, minutos e segundos
h = s0 / 3600;
min = (s0 % 3600) / 60;
seg = s0 % 60;

// Ajusta os segundos e minutos caso os segundos sejam iguais ou maiores que 60
enquanto (seg >= 60) {
        seg -= 60;
        min += 1;
}

// Ajusta os minutos e as horas caso os minutos sejam iguais ou maiores que 60
enquanto (min >= 60) {
        min -= 60;
        h += 1;
}        

escreva(h, ":", min, ":", seg);



================================================================================================================================================================================



algoritmo Triângulo        // QUESTÃO 2) - LISTA 2

// Verifica se os lados formam um triângulo retângulo
lógico: função triangRetang(lado) {
        lógico: ehRet = F;
        se (lado[0]*lado[0] + lado[1]*lado[1] == lado[2]*lado[2]) {
                ehRet = V;
        }

        retorne ehRet;
}

inteiro: lado[3], i, j, temp;

// Registra os lados no array "lado"
para i de 0 até 2 {
        faça {
                escreva("Digite o lado ", i + 1, ": ");
                leia(lado[i]);
                se (lado[i] <= 0) {
                        escreva("Erro: Todos os lados devem ser valores maiores que 0");
                }
        } enquanto (lado[i] <= 0)
}

// Algoritmo Bubble Sort para ordenar os lados e garantir que lado[2] seja o maior lado (hipotenusa) 
para i de 0 até 2 {
        para j de 0 até 2 - i {
                se (lado[j] > lado[j+1]) {                         
                    temp = lado[j];
                    lado[j] = lado[j+1];
                    lado[j+1] = temp;
                }
        }
}

// Chama a função para realizar a verificação e armazena a veracidade ou falsidade em ehRet
ehRet = triangRetang(lado);

// Responde se é verdadeiro ou falso que os lados fornecidos formam um triângulo retângulo
escreva("Os lados fornecidos formam um triângulo retângulo? ", ehRet);
        min -= 60;
        h += 1;
}        

escreva(h, ":", min, ":", seg);



================================================================================================================================================================================



algoritmo númerosPerfeitos        // QUESTÃO 4) - LISTA 2

inteiro: num, divisor, somaDivisores;

faça {

        // Leia o primeiro número
        escreva("Digite um número inteiro positivo (caso queira encerrar o algoritmo, digite um inteiro menor ou igual a 0): ");
        leia(num);

        // Verifica se o número é menor ou igual a zero
        se (num <= 0) {
                escreva("Programa encerrado!");
                interrompa; // Interrompe o loop e encerra o programa
        }
        
        enquanto (num > 0) {
        
                // Inicialize a soma dos divisores
                somaDivisores = 1;
            
                // Encontre os divisores do número, pela técnica da "Fatoração por Tentativa", e some-os
                para divisor de 2 até sqrt(num) {
                        se (num % divisor == 0) {
                                somaDivisores += divisor;
                                se (divisor != (num / divisor)) {
                                        somaDivisores += (num / divisor);
                                }
                        }
                }
            
                    // Verifique se o número é perfeito
                    se (somaDivisores == num) {
                        escreva(num, " é um número perfeito!");
                    } 
        
                    senão {
                        escreva(num, " NÃO é um número perfeito!");
                    }
                    
                    // Leia o próximo número
                    leia(num);
        }
}
